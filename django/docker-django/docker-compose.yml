version: '3.9'
services:
  # Reverse Proxy e Load Balance
  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - 1337:80
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    networks:
      - django_app_net
    depends_on:
      - web
    restart: "on-failure"

  # Django application(production)
  web:
    container_name: web
    build:
      context: ./lovito
      target: production
      # environment:
      # - DEBUG=False
    command: sh -c "python manage.py collectstatic --noinput && gunicorn lovito.wsgi:application --bind 0.0.0.0:8000"
    # STATIC_ROOT folder with assets (collectstatic)
    ports:
      - 80:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    networks:
      - django_app_net
    restart: "on-failure"

  # Django application(development)
  dev:
    container_name: web-dev
    build:
      context: ./lovito
      target: development
      # environment:
      # - DEBUG=True
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      # host:docker
      - 8000:8000
    volumes:
      - ./lovito:/home/app/
    networks:
      - django_app_net
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # Postgres
  postgres:
    container_name: postgres-dev
    image: bitnami/postgresql:latest
    volumes:
      - postgres_data:/bitnami/postgresql
    ports:
      - 5433:5432
    environment:
      - POSTGRESQL_DATABASE=${DB_NAME}
      - POSTGRESQL_USERNAME=${DB_USER}
      - POSTGRESQL_PASSWORD=${DB_PASS}
    networks:
      - django_app_net
    # Evitar App busca PG antes dele estar "pronto"
    # https://laurent-bel.medium.com/waiting-for-postgresql-to-start-in-docker-compose-c72271b3c74a
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:
networks:
  django_app_net:
